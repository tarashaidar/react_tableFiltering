{"version":3,"sources":["tableComponent/table.view.js","tableComponent/table.controller.js","App.js","serviceWorker.js","index.js"],"names":["table_view","Wrapper","styled","div","_templateObject","Table","table","_templateObject2","Form","form","_templateObject3","TableList","state","data","term","loadPage","_callee","response","regenerator_default","a","wrap","_context","prev","next","axios","get","sent","_this","setState","stop","searchHandler","event","target","value","this","x","name","toLowerCase","includes","react_default","createElement","type","placeholder","onChange","filter","searchingFor","map","item","key","id","price","quantity","React","Component","App","table_controller_TableList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"knDAIc,IAAAA,EAAA,CACVC,QAASC,IAAOC,IAATC,KAePC,MAAOH,IAAOI,MAATC,KAqCLC,KAAMN,IAAOO,KAATC,uBCrDaC,6MAEjBC,MAAQ,CACJC,KAAO,GACPC,KAAM,MAGVC,8BAAW,SAAAC,IAAA,IAAAC,EAAAJ,EAAA,OAAAK,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACgBC,IAAMC,IAAI,aAD1B,OACDR,EADCI,EAAAK,KAEDb,EAAOI,EAASJ,KACtBc,EAAKC,SAAS,CACVf,SAJG,wBAAAQ,EAAAQ,SAAAb,QAkBXc,cAAgB,SAACC,GACbJ,EAAKC,SAAS,CACVd,KAAMiB,EAAMC,OAAOC,4FAXvBC,KAAKnB,gDAGID,GACT,OAAO,SAAUqB,GACb,OAAOA,EAAEC,KAAKC,cAAcC,SAASxB,EAAKuB,iBAAmBvB,oCAWjE,OACEyB,EAAApB,EAAAqB,cAACxC,EAAUC,QAAX,KACIsC,EAAApB,EAAAqB,cAAA,6BACJD,EAAApB,EAAAqB,cAACxC,EAAUQ,KAAX,KACA+B,EAAApB,EAAAqB,cAAA,SAAOC,KAAK,SAASC,YAAY,eAAgBC,SAAYT,KAAKJ,cAAeG,MAAOC,KAAKtB,MAAME,QAEnGyB,EAAApB,EAAAqB,cAACxC,EAAUK,MAAX,KACMkC,EAAApB,EAAAqB,cAAA,aACID,EAAApB,EAAAqB,cAAA,UACAD,EAAApB,EAAAqB,cAAA,gBACAD,EAAApB,EAAAqB,cAAA,kBACAD,EAAApB,EAAAqB,cAAA,mBACAD,EAAApB,EAAAqB,cAAA,wBAGHN,KAAKtB,MAAMC,KAAK+B,OAAOV,KAAKW,aAAaX,KAAKtB,MAAME,OAAOgC,IAAI,SAAAC,GAAI,OACpER,EAAApB,EAAAqB,cAAA,aACAD,EAAApB,EAAAqB,cAAA,MAAIQ,IAAOD,EAAKE,IAChBV,EAAApB,EAAAqB,cAAA,UAAKO,EAAKE,IACVV,EAAApB,EAAAqB,cAAA,UAAKO,EAAKX,MACVG,EAAApB,EAAAqB,cAAA,UAAKO,EAAKG,OACVX,EAAApB,EAAAqB,cAAA,UAAKO,EAAKI,uBArDaC,IAAMC,WCO9BC,MARf,WACE,OACEf,EAAApB,EAAAqB,cAAA,WACID,EAAApB,EAAAqB,cAACe,EAAD,QCMYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOvB,EAAApB,EAAAqB,cAACuB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c387a67a.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n\r\nexport default{\r\n    Wrapper: styled.div`   \r\n    & input{\r\n    margin-bottom: 10px;\r\n    padding: 8px 16px;\r\n    border: 1px solid #000;\r\n    border-radius: 10px;\r\n    box-sizing: border-box;\r\n    outline: none;\r\n    }\r\n    h1{\r\n        text-align:center;\r\n        font-family: 'Titillium Web', sans-serif;\r\n        font-size: 32px;\r\n    } \r\n    `,\r\n    Table: styled.table`\r\n    width: 90%;\r\n    border: 1px solid black;\r\n    border-collapse: collapse;\r\n    text-align: center;\r\n    margin: 0 auto;\r\n    & th {\r\n    color: white;\r\n    background-color: #9e9e9e;\r\n    padding: 10px 50px;\r\n    border: 1px solid black;\r\n    font-family: 'Titillium Web', sans-serif;\r\n    font-size: 16px;\r\n    opacity: 0.8;\r\n    cursor: pointer;\r\n    &:hover{\r\n        opacity: 1;}\r\n    };\r\n    td{\r\n    color: black;\r\n    padding: 10px 50px;\r\n    border: 1px solid black;\r\n    font-family: 'Titillium Web', sans-serif;\r\n    font-size: 16px; \r\n    font-weight: bold;\r\n    opacity: 0.8;\r\n    cursor: pointer;\r\n    &:hover{\r\n        opacity: 1;}\r\n    }\r\n    tbody:nth-child(even){\r\n        background-color: #e6e6e6;\r\n    }\r\n    tbody:nth-child(odd){\r\n        background-color: #fff;\r\n    }\r\n    `,\r\n    Form: styled.form`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin: 30px 70px 30px 0;\r\n    `\r\n}","import React from 'react';\r\nimport TableData from './table.view.js';\r\nimport axios from 'axios';\r\n\r\nexport default class TableList extends React.Component{\r\n    \r\n    state = {\r\n        data : [],\r\n        term: ''\r\n    }\r\n\r\n    loadPage = async () => { \r\n        const response = await axios.get('data.json')\r\n        const data = response.data\r\n        this.setState({\r\n            data\r\n        }) \r\n    }\r\n\r\n    componentDidMount(){\r\n        this.loadPage();\r\n    }\r\n\r\n    searchingFor(term) {\r\n        return function (x){\r\n            return x.name.toLowerCase().includes(term.toLowerCase()) || !term;\r\n        }\r\n    }\r\n\r\n    searchHandler = (event) => {\r\n        this.setState({\r\n            term: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <TableData.Wrapper>\r\n              <h1>Table Filtering</h1>\r\n          <TableData.Form>\r\n          <input type=\"search\" placeholder=\"Search . . .\"  onChange = {this.searchHandler} value={this.state.term}/>\r\n          </TableData.Form>\r\n          <TableData.Table>\r\n                <thead>\r\n                    <tr>\r\n                    <th>ID</th>\r\n                    <th>Name</th>\r\n                    <th>Price</th>\r\n                    <th>Quantity</th>\r\n                    </tr>\r\n                </thead>\r\n                {this.state.data.filter(this.searchingFor(this.state.term)).map(item => \r\n                <tbody>\r\n                <tr key = {item.id}>\r\n                <td>{item.id}</td>\r\n                <td>{item.name}</td>\r\n                <td>{item.price}</td>\r\n                <td>{item.quantity}</td>\r\n                </tr>\r\n                </tbody>\r\n                )\r\n                }\r\n          </TableData.Table>\r\n          </TableData.Wrapper>\r\n        );\r\n      }\r\n}","import React from 'react';\nimport TableList from './tableComponent/table.controller.js'\n\nfunction App() {\n  return (\n    <div>\n        <TableList />\n    </div>\n)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}